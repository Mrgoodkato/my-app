TASKS FOR THIS PHASE:
    
    <WORKING ON THIS>
    1) Finish the logic for change of view horizontally and vertically using the keys:

        The idea is basically to make the camera turn left, right, top, bottom if we surpass the limits. Displaying one of the images for the navigation.

        This can be done making the movementLimiter() in the movement.js file throw more information after it hits a limit.

        <PROGRESS AND IDEA> -------------- IMPORTANT!
        Instead of moving in 6 directions like a cube that is only looked at in an upfront position with no tilt, why dont we add a tilt to each direction?

        So, basically this exponentially complicates the simple left, right, up, down navigation, adding the tilt element to the camera.

        So the movements could be as follows (STATIC WITHOUT COUNTING FRONT AND BACKWARDS MOVES):
            
            1) Pan right
            2) Pan left
            3) Pan up
            4) Pan down
            5) Tilt right
            6) Tilt left

        Taking into account these possible movements (we can make the tilt movements go with shift-a, shift-d), our initial mapping of a single frame will be as follows:

            A single frame will contain the following images, saying "Direction" is either, Front, Left, Right, Back, Top, Bottom:
                
                [Direction, DirectionTLeft, DirectionTRigth, DirectionTDown] * 6 (Frame directions) = 24 individual frames of possible view of a single navigation position.
        
        As this is a possibly interesting approach to the navigation in-game, I need to think if I'll embark on that kind of work.
        However, I think that, if you don't risk, and you dont put in your best, no good thing may come. And this could really make the game more interesting if done right!

    <NOT WORKED ON THIS YET>
    2) Work on how we will move forward or backwards in the screen.

        A possible solution is to use another key, such as a combination of <<shift w>>, <<shift d>> to go forwards, backwards.


    <WORK IS DONE HERE>
    3) (Work on centering the initial screen image. Took a pic of some drawings on how this could be though of.)

        <SOLUTION>
        The solution found for this was to create an if check of the screenImg width > 0 and if the initNavigation.firstLoad value was true, then create dimensions of the canvas image and center.

        The center was finally calculated following this formula:
        CENTER = (screenImg.dimension / 2) - (dimensions / 2)

PERSONAL NOTE, AS USUAL:
Well, today was again one of those days I did not want to do shit, but made myself do it, including gym and leg day... ugggh.
And doing stuff, well, doing stuff always brigthens these dark days of feeling like you are a worthless dog in a world going down the drain, just waiting for the stick to hit you where it most hurts at any time.

Trying to stay possitive, but its not easy.

But I have "the work", right Zach?